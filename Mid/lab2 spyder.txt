# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np
from matplotlib import pyplot as plt
from sklearn import svm
from matplotlib import style
#from matplotlib.pyplot as plt
list1 = [1,2,3,4,5,6]
list2 = [10,9,8,7,6,5]
#print(list1 * list2)

#convert to numpy
a1 = np.array(list1)
a2 = np.array(list2)
print(a1*a2)

print(np.linspace(0,10,5))
print(np.arange(0,10,2))

#a = np.array([1,2,3,4,5], dtype = np.float64)

a = np.arange(6)
print(a)

print('b')
b = np.arange(12).reshape(4,3)
print(b)
print(b.sum(axis=0)) #row wise for 0, 1 for column
print(b.min(axis=1))

print('c')

#2matrix ,3 row,4 column
c = np.arange(24).reshape(2,3,4)
print(c)

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a[:, 0])
print(a[:, 1])
print(a[:, 2])

print(a[0:2, 1:3])
print(a[0:2, 0:2])


print(a[-8:17:1])# last theke 8ta badd diye oita theke 17 er ag prjnt 1 kore barbe


x = np.linspace(0,20,200)
y1 = np.exp(-0.1*x)*np.sin(x)
y2 = np.exp(-0.3*x)*np.sin(x)

plt.plot(x,y1)
plt.plot(x,y2)
plt.title('just enough!')
plt.show()



style.use("ggplot")

X = np.array([[1,2],
            [5,8],
            [1.5, 1.8],
            [8,8],
            [1,0.6],
            [9,11]])

Y= [0,1,0,1,0,1]
clf = svm.SVC(kernel='linear', C = 1.0)
clf.fit(X,Y)
#print(clf.predict(np.array([10,10]).reshape(1, -1)))

w = clf.coef_[0]
a = -w[0]/w[1]
xx = np.linspace(0,12).reshape(-1,1)
yy = a*xx - (clf.intercept_[0] / w[1])

plt.plot(xx,yy, 'k--', label = 'Decision Boundary')


plt.scatter(X[:, 0], X[:, 1])
plt.legend()
plt.show()


